{"version":3,"sources":["paginator.js"],"names":["global","factory","exports","module","define","amd","paginator","this","params","data","range","currentPageNumber","numItemsPerPage","totalCount","key","hasOwnProperty","results","current","first","previous","next","pagesInRange","firstPageInRange","lastPageInRange","pageCount","last","Math","ceil","delta","offset","count","abs","i","push"],"mappings":"CAEE,SAAUA,EAAQC,GACG,iBAAZC,SAA0C,oBAAXC,OAAyBA,OAAOD,QAAUD,IAC1D,mBAAXG,QAAyBA,OAAOC,IAAMD,OAAOH,GAChDD,EAAOM,UAAYL,IAH9B,CAICM,KAAM,WAAe,aA8EnB,OAvEgB,SAAUC,GACtB,IAAIC,GACAC,MAAO,EACPC,kBAAmB,EACnBC,gBAAiB,GACjBC,WAAY,GAGhB,GAAsB,iBAAXL,EACP,IAAK,IAAIM,KAAON,EACRA,EAAOO,eAAeD,IAAQL,EAAKM,eAAeD,KAClDL,EAAKK,GAAON,EAAOM,IAK/B,IAAIE,GACAC,QAASR,EAAKE,kBACdC,gBAAiBH,EAAKG,gBACtBM,MAAO,EACPL,WAAYJ,EAAKI,WACjBM,SAAU,KACVC,KAAM,KACNC,gBACAC,iBAAkB,KAClBC,gBAAiB,KACjBC,UAAW,EACXC,KAAM,GAGVT,EAAQQ,UAAYE,KAAKC,KAAKlB,EAAKI,WAAWJ,EAAKG,iBAE/CH,EAAKC,MAAQM,EAAQQ,YACrBf,EAAKC,MAAQM,EAAQQ,WAGzB,IAAII,EAAQF,KAAKC,KAAKlB,EAAKC,MAAM,GAEjC,GAAIM,EAAQC,QAAUW,EAAQZ,EAAQQ,UAAYf,EAAKC,MACnDM,EAAQM,iBAAmBN,EAAQQ,UAAYf,EAAKC,MAAQ,EAC5DM,EAAQO,gBAAkBP,EAAQQ,cAC/B,CACCR,EAAQC,QAAUW,EAAQ,IAC1BA,EAAQZ,EAAQC,SAGpB,IAAIY,EAASb,EAAQC,QAAUW,EAE/BZ,EAAQM,iBAAmBO,EAAS,EACpCb,EAAQO,gBAAkBM,EAASpB,EAAKC,MAG5CM,EAAQS,KAAOT,EAAQQ,UAEG,EAAtBR,EAAQC,QAAU,IAClBD,EAAQG,SAAWH,EAAQC,QAAU,GAGrCD,EAAQC,QAAU,GAAKD,EAAQQ,YAC/BR,EAAQI,KAAOJ,EAAQC,QAAU,GAIrC,IADA,IAAIa,EAAQJ,KAAKK,IAAIf,EAAQO,gBAAgBP,EAAQM,kBAC5CU,EAAI,EAAGA,GAAKF,EAAOE,IACxBhB,EAAQK,aAAaY,KAAKjB,EAAQM,iBAAmBU,GAGzD,OAAOhB","file":"paginator.min.js","sourcesContent":["//! paginator.js\n\n;(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n        typeof define === 'function' && define.amd ? define(factory) :\n            global.paginator = factory()\n}(this, (function () { 'use strict';\n\n    /**\n     *\n     * @param params\n     * @returns {{current: number, numItemsPerPage: number, first: number, totalCount: number, previous: null, next: null, pagesInRange: Array, firstPageInRange: null, lastPageInRange: null, pageCount: number, last: number}}\n     */\n    var paginator = function (params) {\n        var data = {\n            range: 5,\n            currentPageNumber: 1,\n            numItemsPerPage: 20,\n            totalCount: 0\n        };\n\n        if (typeof params === \"object\") {\n            for (var key in params) {\n                if (params.hasOwnProperty(key) && data.hasOwnProperty(key)) {\n                    data[key] = params[key];\n                }\n            }\n        }\n\n        var results = {\n            current: data.currentPageNumber,\n            numItemsPerPage: data.numItemsPerPage,\n            first: 1,\n            totalCount: data.totalCount,\n            previous: null,\n            next: null,\n            pagesInRange: [],\n            firstPageInRange: null,\n            lastPageInRange: null,\n            pageCount: 0,\n            last: 0\n        };\n\n        results.pageCount = Math.ceil(data.totalCount/data.numItemsPerPage);\n\n        if (data.range > results.pageCount) {\n            data.range = results.pageCount;\n        }\n\n        var delta = Math.ceil(data.range/2);\n\n        if (results.current - delta > results.pageCount - data.range) {\n            results.firstPageInRange = results.pageCount - data.range + 1;\n            results.lastPageInRange = results.pageCount;\n        } else {\n            if (results.current - delta < 0) {\n                delta = results.current;\n            }\n\n            var offset = results.current - delta;\n\n            results.firstPageInRange = offset + 1;\n            results.lastPageInRange = offset + data.range;\n        }\n\n        results.last = results.pageCount;\n\n        if (results.current - 1 > 0) {\n            results.previous = results.current - 1;\n        }\n\n        if (results.current + 1 <= results.pageCount) {\n            results.next = results.current + 1;\n        }\n\n        var count = Math.abs(results.lastPageInRange-results.firstPageInRange);\n        for (var i = 0; i <= count; i++) {\n            results.pagesInRange.push(results.firstPageInRange + i);\n        }\n\n        return results;\n    };\n\n\n    return paginator;\n})));"]}